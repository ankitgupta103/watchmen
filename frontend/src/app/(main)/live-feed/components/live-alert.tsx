'use client';

import React, { useCallback, useEffect, useRef, useState } from 'react';
import {
  AlertTriangle,
  Bell,
  Camera,
  CheckCircle,
  Clock,
  MapPin,
  Shield,
  Volume2,
  VolumeX,
  Wifi,
  X,
} from 'lucide-react';
import { toast } from 'sonner'; 

import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';

import { cn } from '@/lib/utils';

// Types for alert system
interface CriticalAlert {
  id: string;
  timestamp: Date;
  machineId: number;
  machineName: string;
  type:
    | 'security_breach'
    | 'device_offline'
    | 'hardware_failure'
    | 'weapon_detected'
    | 'perimeter_breach';
  severity: 'high' | 'critical';
  message: string;
  location: { lat: number; lng: number };
  acknowledged: boolean;
  autoGenerated?: boolean;
}

interface AlertSystemProps {
  onAlertReceived?: (alert: CriticalAlert) => void;
  enableSound?: boolean;
  mockAlerts?: boolean;
}

// Mock MQTT alert generator
const generateMockAlert = (): CriticalAlert => {
  const alertTypes = [
    {
      type: 'weapon_detected' as const,
      severity: 'critical' as const,
      messages: [
        'Weapon detected with 94% confidence',
        'Firearm identified in restricted area',
        'Sharp object detected at checkpoint',
      ],
    },
    {
      type: 'security_breach' as const,
      severity: 'critical' as const,
      messages: [
        'Unauthorized access detected',
        'Perimeter fence breach detected',
        'Motion detected in restricted zone',
      ],
    },
    {
      type: 'device_offline' as const,
      severity: 'high' as const,
      messages: [
        'Device communication lost',
        'Heartbeat signal timeout',
        'Network connectivity failure',
      ],
    },
    {
      type: 'hardware_failure' as const,
      severity: 'critical' as const,
      messages: [
        'Camera system malfunction',
        'Sensor array failure detected',
        'Power system critical failure',
      ],
    },
    {
      type: 'perimeter_breach' as const,
      severity: 'critical' as const,
      messages: [
        'Perimeter fence cut detected',
        'Unauthorized vehicle approach',
        'Multiple individuals detected',
      ],
    },
  ];

  const machines = [
    { id: 1, name: 'sentinel-alpha-01' },
    { id: 2, name: 'watchman-beta-02' },
    { id: 3, name: 'guardian-gamma-03' },
    { id: 7, name: 'guardian-eta-07' },
    { id: 12, name: 'vigilant-mu-12' },
  ];

  const selectedType =
    alertTypes[Math.floor(Math.random() * alertTypes.length)];
  const selectedMachine = machines[Math.floor(Math.random() * machines.length)];
  const selectedMessage =
    selectedType.messages[
      Math.floor(Math.random() * selectedType.messages.length)
    ];

  return {
    id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    timestamp: new Date(),
    machineId: selectedMachine.id,
    machineName: selectedMachine.name,
    type: selectedType.type,
    severity: selectedType.severity,
    message: selectedMessage,
    location: {
      lat: 12.9716 + (Math.random() - 0.5) * 0.1,
      lng: 77.5946 + (Math.random() - 0.5) * 0.1,
    },
    acknowledged: false,
    autoGenerated: true,
  };
};

// Audio Manager
class AudioManager {
  private audioContext: AudioContext | null = null;
  private alarmBuffer: AudioBuffer | null = null;
  private isInitialized = false;

  async initialize() {
    if (this.isInitialized) return;

    try {
      this.audioContext = new (window.AudioContext ||
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (window as any).webkitAudioContext)();
      await this.createAlarmSound();
      this.isInitialized = true;
    } catch (error) {
      console.warn('Audio initialization failed:', error);
    }
  }

  private async createAlarmSound() {
    if (!this.audioContext) return;

    // Create a more urgent alarm sound
    const sampleRate = this.audioContext.sampleRate;
    const duration = 1.5; // seconds
    const buffer = this.audioContext.createBuffer(
      1,
      sampleRate * duration,
      sampleRate,
    );
    const data = buffer.getChannelData(0);

    for (let i = 0; i < buffer.length; i++) {
      const time = i / sampleRate;

      // Create a complex alarm sound with multiple frequencies
      const freq1 = 800 + Math.sin(time * 4) * 200; // Wobbling frequency
      const freq2 = 1200;
      const freq3 = 600;

      const wave1 = Math.sin(2 * Math.PI * freq1 * time);
      const wave2 = Math.sin(2 * Math.PI * freq2 * time);
      const wave3 = Math.sin(2 * Math.PI * freq3 * time);

      // Envelope for urgency
      const envelope = Math.pow(Math.sin((time * Math.PI) / duration), 0.5);

      // Mix the waves with envelope
      data[i] = (wave1 * 0.4 + wave2 * 0.3 + wave3 * 0.3) * envelope * 0.3;
    }

    this.alarmBuffer = buffer;
  }

  async playAlarm(volume: number = 0.5) {
    if (!this.audioContext || !this.alarmBuffer || !this.isInitialized) {
      await this.initialize();
      if (!this.audioContext || !this.alarmBuffer) return;
    }

    // Resume audio context if suspended (browser autoplay policy)
    if (this.audioContext.state === 'suspended') {
      await this.audioContext.resume();
    }

    const source = this.audioContext.createBufferSource();
    const gainNode = this.audioContext.createGain();

    source.buffer = this.alarmBuffer;
    source.connect(gainNode);
    gainNode.connect(this.audioContext.destination);
    gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);

    source.start();
  }
}

export default function CriticalAlertSystem({
  onAlertReceived = (alert) => {
    console.log('alert received', alert);
  },
  enableSound = true,
  mockAlerts = true,
}: AlertSystemProps) {
  const [alerts, setAlerts] = useState<CriticalAlert[]>([]);
  const [isAudioEnabled, setIsAudioEnabled] = useState(enableSound);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [volume, setVolume] = useState(0.7);
  const [unacknowledgedCount, setUnacknowledgedCount] = useState(0);

  const audioManagerRef = useRef(new AudioManager());
  const flashIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const mockIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const modalRef = useRef<HTMLDivElement>(null); // Ref for modal for click outside

  // Initialize audio on first user interaction
  useEffect(() => {
    const initAudio = async () => {
      await audioManagerRef.current.initialize();
    };

    const handleUserInteraction = () => {
      initAudio();
      document.removeEventListener('click', handleUserInteraction);
      document.removeEventListener('keydown', handleUserInteraction);
    };

    document.addEventListener('click', handleUserInteraction);
    document.addEventListener('keydown', handleUserInteraction);

    return () => {
      document.removeEventListener('click', handleUserInteraction);
      document.removeEventListener('keydown', handleUserInteraction);
    };
  }, []);

  // Mock alert generator (simulating MQTT messages)
  useEffect(() => {
    if (!mockAlerts) return;

    const generateAlert = () => {
      const newAlert = generateMockAlert();
      addAlert(newAlert);
    };

    // Generate initial alert after 3 seconds
    const initialTimeout = setTimeout(generateAlert, 3000);

    // Then generate alerts every 10 seconds
    mockIntervalRef.current = setInterval(generateAlert, 10000);

    return () => {
      clearTimeout(initialTimeout);
      if (mockIntervalRef.current) {
        clearInterval(mockIntervalRef.current);
      }
    };
  }, [mockAlerts]);

  // Flash effect for critical alerts
  const startFlashing = useCallback(() => {
    if (flashIntervalRef.current) return;

    let isRed = false;
    flashIntervalRef.current = setInterval(() => {
      document.body.style.backgroundColor = isRed
        ? ''
        : 'rgba(239, 68, 68, 0.1)';
      isRed = !isRed;
    }, 500);

    // Stop flashing after 10 seconds
    setTimeout(() => {
      if (flashIntervalRef.current) {
        clearInterval(flashIntervalRef.current);
        flashIntervalRef.current = null;
        document.body.style.backgroundColor = '';
      }
    }, 10000);
  }, []);

  // Add new alert
  const addAlert = useCallback(
    async (alert: CriticalAlert) => {
      setAlerts((prev) => [alert, ...prev.slice(0, 49)]); // Keep last 50 alerts
      setUnacknowledgedCount((prev) => prev + 1);
      if (isAudioEnabled && alert.severity === 'critical') {
        try {
          await audioManagerRef.current.playAlarm(volume);

          // Play alarm 3 times with intervals for critical alerts
          setTimeout(() => audioManagerRef.current.playAlarm(volume), 1000);
          setTimeout(() => audioManagerRef.current.playAlarm(volume), 2000);
        } catch (error) {
          console.warn('Failed to play alarm sound:', error);
        }
      }

      // Flash screen for critical alerts
      if (alert.severity === 'critical') {
        startFlashing();
      }

      toast.custom(
        (t) => (
          <div
            className={cn(
              'flex w-full max-w-md items-center justify-between rounded-lg border border-orange-400 bg-orange-50 p-3 shadow-lg',
              { 'border-red-400 bg-red-50': alert.severity === 'critical' },
            )}
          >
            <div className="flex items-center gap-3">
              {getAlertIcon(alert.type)}
              <div>
                <p className="text-sm font-semibold text-gray-900">
                  {alert.type.replace('_', ' ').toUpperCase()}
                </p>
                <p className="text-sm text-gray-700">
                  {alert.machineName}: {alert.message}
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => toast.dismiss(t)}
              className="ml-2"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        ),
        {
          duration: alert.severity === 'critical' ? 7000 : 5000,
          id: alert.id,
          position: 'bottom-right',
        },
      );

      // Callback for parent component
      if (onAlertReceived) {
        onAlertReceived(alert);
      }
    },
    [isAudioEnabled, volume, startFlashing, onAlertReceived],
  );

  // Acknowledge alert
  const acknowledgeAlert = useCallback((alertId: string) => {
    setAlerts((prev) =>
      prev.map((alert) =>
        alert.id === alertId ? { ...alert, acknowledged: true } : alert,
      ),
    );
    setUnacknowledgedCount((prev) => Math.max(0, prev - 1));
  }, []);

  // Acknowledge all alerts
  const acknowledgeAll = useCallback(() => {
    setAlerts((prev) =>
      prev.map((alert) => ({ ...alert, acknowledged: true })),
    );
    setUnacknowledgedCount(0);
  }, []);

  // Clear all alerts
  const clearAll = useCallback(() => {
    setAlerts([]);
    setUnacknowledgedCount(0);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        modalRef.current &&
        !modalRef.current.contains(event.target as Node)
      ) {
        setIsModalOpen(false);
      }
    };

    if (isModalOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isModalOpen]);

  // Get alert icon
  const getAlertIcon = (type: CriticalAlert['type']) => {
    switch (type) {
      case 'weapon_detected':
        return <Shield className="h-5 w-5 text-red-500" />;
      case 'security_breach':
      case 'perimeter_breach':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'device_offline':
        return <Wifi className="h-5 w-5 text-orange-500" />;
      case 'hardware_failure':
        return <Camera className="h-5 w-5 text-red-500" />;
      default:
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
    }
  };

  // Format time elapsed
  const getTimeElapsed = (timestamp: Date) => {
    const now = new Date();
    const diff = now.getTime() - timestamp.getTime();
    const minutes = Math.floor(diff / 60000);
    const seconds = Math.floor((diff % 60000) / 1000);

    if (minutes > 0) {
      return `${minutes}m ${seconds}s ago`;
    }
    return `${seconds}s ago`;
  };

  return (
    <>
      {/* Alert Trigger Button */}
      <div className="fixed top-4 right-4 z-50">
        <Button
          onClick={() => setIsModalOpen(!isModalOpen)} 
          className={cn(
            'relative',
            unacknowledgedCount > 0
              ? 'animate-pulse bg-red-500 hover:bg-red-600'
              : '',
          )}
          size="lg"
        >
          <Bell className="mr-2 h-5 w-5" />
          Alerts
          {unacknowledgedCount > 0 && (
            <Badge className="absolute -top-2 -right-2 h-5 min-w-[20px] bg-yellow-500 px-1 text-black">
              {unacknowledgedCount > 99 ? '99+' : unacknowledgedCount}
            </Badge>
          )}
        </Button>
      </div>

      {/* Alert Panel (Modal) */}
      {isModalOpen && ( 
        <div className="absolute inset-0 z-[1000] flex items-center justify-center bg-black/50 p-4">
          <Card
            className="max-h-[90vh] w-full max-w-md overflow-hidden"
            ref={modalRef}
          >
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5 text-red-500" />
                  Critical Alerts
                  {unacknowledgedCount > 0 && (
                    <Badge variant="destructive">
                      {unacknowledgedCount} New
                    </Badge>
                  )}
                </CardTitle>
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsAudioEnabled(!isAudioEnabled)}
                  >
                    {isAudioEnabled ? (
                      <Volume2 className="h-4 w-4" />
                    ) : (
                      <VolumeX className="h-4 w-4" />
                    )}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsModalOpen(false)} 
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              {/* Controls */}
              <div className="mt-2 flex gap-2">
                {unacknowledgedCount > 0 && (
                  <Button size="sm" onClick={acknowledgeAll} className="flex-1">
                    <CheckCircle className="mr-1 h-4 w-4" />
                    Ack All
                  </Button>
                )}
                <Button
                  size="sm"
                  variant="outline"
                  onClick={clearAll}
                  className="flex-1"
                >
                  Clear All
                </Button>
              </div>

              {/* Volume Control */}
              {isAudioEnabled && (
                <div className="mt-2 flex items-center gap-2">
                  <VolumeX className="h-4 w-4" />
                  <Input
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={volume}
                    onChange={(e) => setVolume(parseFloat(e.target.value))}
                    className="flex-1"
                  />
                  <Volume2 className="h-4 w-4" />
                </div>
              )}
            </CardHeader>
            <CardContent className="p-0">
              {/* Status */}
              <div className="px-4 pb-3">
                <Alert className="border-blue-200 bg-blue-50">
                  <Wifi className="h-4 w-4 text-blue-600" />
                  <AlertDescription className="text-blue-800">
                    {mockAlerts
                      ? 'MQTT Simulation Active'
                      : 'Listening for MQTT messages...'}
                  </AlertDescription>
                </Alert>
              </div>

              <Separator />

              {/* Alerts List */}
              <div className="max-h-96 overflow-y-auto">
                {alerts.length === 0 ? (
                  <div className="p-8 text-center text-gray-500">
                    <Bell className="mx-auto mb-2 h-12 w-12 opacity-30" />
                    <p>No alerts received</p>
                    <p className="text-sm">System is monitoring...</p>
                  </div>
                ) : (
                  <div className="space-y-2 p-2">
                    {alerts.map((alert) => (
                      <div
                        key={alert.id}
                        className={cn(
                          'rounded-lg border p-3 transition-all',
                          alert.acknowledged
                            ? 'border-gray-200 bg-gray-50'
                            : alert.severity === 'critical'
                              ? 'border-red-200 bg-red-50 shadow-md'
                              : 'border-orange-200 bg-orange-50',
                        )}
                      >
                        <div className="mb-2 flex items-start justify-between">
                          <div className="flex items-center gap-2">
                            {getAlertIcon(alert.type)}
                            <div>
                              <Badge
                                variant={
                                  alert.severity === 'critical'
                                    ? 'destructive'
                                    : 'secondary'
                                }
                                className="text-xs"
                              >
                                {alert.type.replace('_', ' ').toUpperCase()}
                              </Badge>
                              {!alert.acknowledged && (
                                <Badge
                                  variant="outline"
                                  className="ml-1 text-xs"
                                >
                                  NEW
                                </Badge>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center gap-1">
                            <Clock className="h-3 w-3 text-gray-400" />
                            <span className="text-xs text-gray-500">
                              {getTimeElapsed(alert.timestamp)}
                            </span>
                          </div>
                        </div>

                        <div className="mb-2 text-sm">
                          <div className="font-medium text-gray-900">
                            {alert.machineName}
                          </div>
                          <div className="text-gray-600">{alert.message}</div>
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-1 text-xs text-gray-500">
                            <MapPin className="h-3 w-3" />
                            {alert.location.lat.toFixed(4)},{' '}
                            {alert.location.lng.toFixed(4)}
                          </div>

                          {!alert.acknowledged && (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => acknowledgeAlert(alert.id)}
                              className="text-xs"
                            >
                              <CheckCircle className="mr-1 h-3 w-3" />
                              Acknowledge
                            </Button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
}
